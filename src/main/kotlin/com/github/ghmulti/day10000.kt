package com.github.ghmulti

import java.util.*
import java.util.concurrent.atomic.AtomicInteger
import kotlin.system.measureTimeMillis

private data class Figure(
    val parts: List<Pair<Int, Int>>,
)

@Suppress("unused")
private const val MOVE_TEST = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"
private const val MOVE_SOLUTION = "><<<>><<<>>><<<>>>><>>><>>>><<>><<>><>>>><<>>><<>><<>>>><<>>><<>><<<<><<<<><><<>><<<<>>>><<><<<>>><>>><<<>>><>><<<<><<<><<>><<<<>>><<<>>><<<>>><<<<><<<>>>><<<<>><<<<>>><<><><>>>><<<>>>><><<<<><<<><>>>><<<>><<>><<>><><<<<><<<<>>><>>>><<>>><><<>><<><<<<>><<>><<>>>><<<<>><<><<><<<<>><<>>><<<<>>><<>><<><<<>>>><<<>><<<>>><>><<><<<<>><<<<><><<<<>>><<<>>><<<>>>><<<<>>><<>>><<<<>>><<<><<><>><>><<<>>><<<<>>>><<>>>><<<<>>><<>>><>><<<>>><<<<>><<<<><>>>><>><>>><<<<>>>><<>>><<<<>><>>>><<<<>><><<<><>>><>>>><>><<<>><<><<<><<<<>>>><>><><<<<><<<>>>><<<<>>>><<<<>><<>><<>>><<<>>>><>>>><<<><<<>>><>><<<<>>><<<>><<<>>>><<>>>><<<>>><<><<><<<<>><<>>><>>>><<>>>><<><<<<>>><<<<><<<<>>><<>>><>>><<>>>><<<<>>>><<><>>><<<<>><<><<>><<<<>><<<<>>><<<>><><<<><<<<>>>><<>>><><<>><<<>><<>>><<<<>><>><<<>><<<>>><>>><>>>><<<><>><<>>>><<<<>><<><<<<>><<<>><<>><<<>>>><><<<>>><>><<<><<<>>><<<><<<<>>><<>>><<<>>>><<<>><<>>><<>><<>>>><<>>>><>>>><<<<>><>>><<<><<<><<><<<<>>>><<>>><<<<><<<<>><>><<>><<<><<>>><>>>><>>>><<<<>>>><>>>><<<>><<<<>>><<<>>><>>><<><<>>>><<<><>>><<>>>><<<<><>>>><><<<<>>><<<>><>>><><<>>>><<<<>>><<<<><<>>><<>>>><>><<<<><<<><<<>>>><<><<<<>>>><<<>>><<<>><<>>><>>>><<<<>>>><<<<>><>><><<<><>>><>><>>>><<<<>>><<<<>><<<>><<<<>>>><<<><>>><<><<<>><<<>>>><<<>><>>>><<<<>>>><>>><<>>><<<>>><<<><>>>><>><<<<>>><>><<<><<<<>>><><<<<>>><<<<><<>>>><<<<>>><<<>><<<><><<>>>><>><<>>><>><<>>><<<<>><<<<><>><<<<>><<<><<>><>>>><<<>>>><<<<>>><<<<>>><>>><>>><<>>><<<<><<<<>><><<<>>><<>><<>>><>>><<<<>>><<<<>>><<<>>><<<<>>><<<<>>>><<>>><<<>><<<<><<><<>><>>>><<<<>>><<>><<>>><<<>>>><<<<>>><<<<><>>>><<<<>>>><<<><>><<<<>>><><<<><>>><<<<><<<<><>>><<<<>>><>>>><>>>><<>>>><<<>>><<>><<<<><<<>>>><<<<>>><<<<><<<<>><<<>><<>>><<<<>><>>>><<<<>><<>>><<<><<>>><<>><<>>>><<<<>>><<<<>>><<<<>>><>>>><>>><<><>><<<<>>>><>>><<>>><<<>><<<><<><<<>><<<>>>><>>><<>><<>>><<<<><<<>>><<<<>>>><<<>>><>>><<>>><<<<>>>><<><<>><>>><<>>>><>>>><>><<<>>>><<>>>><<<<>>><>>><<>>>><<<<>>>><><<<<>>>><<><<<<>>><<<<>>>><<>><>><<<<>>><<><<<>>>><<<>>><<<>>><<<<>>><<>><>>><<<>>>><>>>><<><>>><<<>>><>>><<<><<<><<>>><>>><<>>>><<><<<<>>>><<>><<<<>><<<<>>>><<<><>>><<><<<<>>>><<<>><<<>><>><>>>><>><><<>><<>><<<<><<><<>>>><>>><<<<><<>>>><<><<>>><<<<>><<<<><<<><>>><<>>>><<<<><<<<>>><<<>><<<<><<<<>>>><<>>>><<<<>>><<<><<<><<><<<<>>>><<<>>>><<<>>><<<<>><<<>>>><>>><<<<>><<>>>><<<>>>><>><<<<>>><<<<>>><<><<>>>><<<><<<<>>>><<<>><<>>>><<<>>>><<<><<<<>>><<<>>>><>><<<<>>><<>>>><><<<<>>>><<>><<<>><<<>><<<<>>>><<<<>>>><<<>>><<>>>><<<<><<<<>>><<<>>>><<<<>>><<<<>>><>>><<<<>><<>><>>>><<<><<<>>>><<<>>>><>>><<><><<<>>>><>>>><<<>>>><<>>>><><<<<>><>>><>>>><><<>>>><>>><<>>>><<<>><<>>>><<><<><<>><<<<>>><<<>>>><<>>><<<>>>><>><<<<>>><<>>><<<>>><<<>>>><<><>>><>>>><>>>><<<<>><<>>><><<>>><<>>><<>>><<>><><<<><<<<>>><<<<><<<<><<<<>><<<<><<<><<<<>>><<<<>>>><><<<>><>>><>>><>><<<>>>><<<>>>><<>>><<><>><<<>>><<<><>>><<<>>><<>><<>><<>>>><<<<>>><<<>>>><>><<>>>><<<<><<<>>><<>><<<><<<>>><>>>><<<<><<<>><>><<<>><>>>><<<<><>><<<<>><<>><>>>><<>><<<<>>>><>><>>>><<><<>><>>>><<<>>>><<<<>><>>><<>><<<<>><<<<><<<<>>>><>><<>><<<<><<<>>>><<<>><<>>>><<<>>>><>>>><<<>><<<>><<<><<>>><<>>>><<>>><<<>><<<>><<<>>><<>>><>><<><<<>><<><>><>><<<>>><<<<><<<><>>>><<<><>>><<<>>><<<<>>><<>>><<<<>>>><<>><<<>>>><<><<<><>>><<<>>><<<>><<<<>>><<>>><>><<<>><<>>><>>><<<>>><<<>>>><<<>>>><>>><<<<><>>>><><>>>><>><>>><>><<>><<<<>>>><><<<<>>><>>>><<>>><<<><<<>><<>><<<>>>><<>>>><><<<>>><<<<>><<<<><<>><>>><>><<<>>>><<<<>><<<>>>><<<<><<<>>><<>>>><<>><<<<>>>><<<<>>><<<>>><<>><<<>><>>>><<<>>>><<<<><>>><<><<<>>>><>>>><<>>>><>><<<><<>>><<<>>><<<<>>>><<<<>>><>><<>>><<<<>>>><<<<><<>><<>>><<<<>><<<<>><<><>>>><>>>><<>>>><<>>>><>><<<>>><<<>><<<<>>><<<>>><>><<>><<>><<<>><<<<><<<<><>>><<>>>><>>>><<<>>>><<<>><<><<><<<<>>>><<<<><<<>><<<><>>><<<<>><>><<><<<>><>>><<>>>><<><<>><<>><<<<><<>>><<<<>>><<<><<<<>><<<>>>><><<>>>><<>>>><<<>><<<<>>><<<<><><><<<>><<<<>>><<<<>>>><>>><<<>>>><<<<>><>><<<<>><<>><<<>><<<><<<><<<<>>>><><<>>>><>>><<>>>><>>>><<<<>>><<<>>><<<<><>>><><<<<>><<<<>>><<<<>>>><>>>><<<>>><<<<>>>><<<<>>><>>><<>><<>>>><<<<><<<<>><<>>><<><><<><<<<><<><<<><>>>><<<<>><<>>><>>><<><<>><<>>>><<<<><<<>>>><<>>>><<<><<<><>>><<<>>>><><<<>>>><><>>><<>>>><<<<>>><<<>>>><<<<>><<<>><<<<><<<><<>>>><>>><<<>>>><>>>><<<><<>>>><<<<>>>><>>><<<>><<>><<<<>>><<<>><>>>><<<<>>>><<><<<>>><<<<>><<<>>><><<<<>><<<<>><<><<>><>><><<<<><<>>><<<<>>><<>>><<<<>><<<<>><<><<<<>>><<>><<>>><><<<>>>><>>><<>>>><<<<>><<<<><<>>>><>>>><>>><<<<>>><>><>><<<<>><>>><<<>>>><<<><<<>><<<>>>><<>>><<<>>>><><>>>><<>><<<<>><<<<>>><<>><<>>><>><<<>><<<>>><<<<>>>><<<<>>>><>><<<<>>>><<><<<<>>><>>>><>>><<>>>><<<>>>><>>>><><<<><<>>>><><><<<<>>><<<<>><<<<><<><<<<>>><<<<>><<>>><<<>>><<<<>>><<<<><<<<>>>><<<<>>>><<<>><<>>><<<<><>>>><<>>>><<<<><<<><>>><<<>>>><>>><<<>><<<>><<<>>>><<>>><<><>><>>>><<<>>><<><<<>><<<<><>>><><<<<>><<<>><<<>>>><<><<<<>>><<<<>><<<>><<<>>><<>>>><>>><<>>><<<<><><<<>><<<><>><<>><<<<>>><<<>>>><<<<>>><<><<<<>>><<<>><<<>>>><<<<><><<>>><<<><<<>>><<<<>>>><>>>><<><<<><<<<>>>><<<><>>><<<<><<<<>><<>>>><<>><>>><>>><<>>><><><<<>>>><><>>><>>>><<<><<<<>><<<>>><<<<>><>>>><<><<><<<<>><><><<<>><<<<>>><<<<>>>><>><<<<>><>>>><>>><<<<><<<>>><<<<>><<<<>>>><<>>><<>><<<<>>>><<>>>><<<<>><><<<>>>><><<<<>><>>><<<<>><<<><<<<>>><<>>><<>>><<<>>>><>>>><>>><<>>>><<<<><><>>>><<<><><>>><>>>><<<<><<<<>>><<>>><<<<>>><>>>><<<<>>><<<>><<><>><<<<>>><<>>><<<>><><<<<>>>><<>>>><<<>>>><<>><<<>>>><<<>><<<<>>><>>>><<>>><<<<>><<<>>>><<<<>>>><<>><<<>>><<>><<><><>><<<<><<>><<<<>><<><<<>>>><<>>>><<<><>>>><><<>><<<<>>><<<>>><<<<>>><>>><<<>>><><>>>><<>>>><<<<><<><<>>>><<<>>>><<><<<<>>><<<<>>><<>><<<<><<<>>>><<<>>>><<<<>>>><<<<>>><<>><><>>>><<>><<<>>>><<<<>><<<<>>><<<<>>><><<<>>>><<<<>>><<>><<<><<<<>>><>>>><>>><<>>><<>><<<<>>><<<<>>><<<>><>>><<<>>><<>>>><<>>><<<><<<>><<><<<<>>>><>>>><>>><<>>><<<>>>><<>>>><<><<<>>>><<><<<>><>><<>><<<<>><<>><<<<><<<<><<>>><<<>>>><><<>>>><<<><<>>>><<<<><>><<>><<<>>><<<<>><>><<<<>><<<<>><<>>><<<<><<>>>><>>>><<>>>><>>><>>><<<<>>><><><>>><<<>><<<>><>>><><>><<<<>>>><<>>>><<<>><>>><>><<>>>><<<<>>>><<<>><<<>>><>><<<>>><<<<>><<<<>><<>>>><>><><<<>>><<<>>><><><<<>>>><<<<>><<<><<<<>>>><<<<>>><>><>>>><<<>><<<<><<<<>>>><<>><<<<>>><<><<>>>><<>>><<<>>>><<>>>><<>><<>>>><<<<>>>><<<>>><<>><<<>>><<>>>><<<<>>>><>>><<<<>>><<>>>><<<<><<<>>>><<>><>><<<>>><<<<>><>>>><<<<>>>><>>><<<<>>><>>>><<><<>>><<>><<<<>>>><<<>><<<>>><<<<>><<<>>><<<>><<<><<>><<>>>><<<<>><<<>>><<>><<<>>>><<>>>><<<<>>>><<<>>><<<<>>><<>>><<>>>><<<<><<<<>>>><<<<>><>><<<<>><<><<<<>>>><<>><<<<>>><<<><<<><><<<>>><<<<><>><<<>><<>>>><<>><><<><<>>><<<>><>>><<<<>><>>><><<<>>>><<<<>>>><<>><<>><<<<>>>><<>>>><<<<>><>><<>>><<<>><>><<><<>>>><<<<>><>>>><<<<>>><><>>><>><<<<><<<><<<<>>><<<<>><<<<>>>><>><>>>><<<<>>><>>><<<<>>><<<<>>><<>><<><<<>>><><<<>><>>>><>><>>>><<<<>>><<<<>>><><<<<>>><<>>>><<<<>>>><<<>>><<<>><<<<>><<<>>><<<<><><<<<><><<<>><<>>>><<<<>>><<<<>>>><<<><<<>>>><<>>>><<<<>>>><<>>><<>><<>><<<>>><><<<><<<<><>>><<<<>>>><<<<>>>><<>>><<<<>><<<>>><<>>>><><>>>><<<<>><<<><><<<<><>>><<>>><>><>>><<<>>>><<<>>><>>>><<>>><><<<><<<<><<>>>><>>>><<<<>>>><<<<>>>><<>>><>>><>><<>>><><<><<><<<>><>><><<><<>><<>>><<<>>><<<<>>>><><<><<><<>>><<<>>>><<><<<<>>>><<<>>><<>><><>>>><<<>>>><<>>>><<<>><<<><<>><<<<>>>><<<<>>>><<>>>><<<<>>><<>>><<>>>><<>><>><<<<>><<<<>>><>>>><<>><<>><>><>>>><<<<>>>><<<<>>><>>>><<>><<<><><<<><<<<>>><<<<>>><<<<>>><>>><><><>>>><>>>><<<<>>>><<<<>>>><<>>>><<<<>>>><<>><<<>>><<>>>><<><><>>>><>><<>><<<>>><<<<>>>><>>>><<>>>><><><<<<>>><<<>>>><<>>>><<>>><<>><<><>><<<>>><<<<>>><<<<>>><<>>><<<<>><<<<>><<<<>>><<<>><<<>>>><<<><><<>><>><<>><<<<>>><<<<><><<<>>>><<<<><<>>><<<>>><<<><<<<>><<><<<<>>>><<<<>>><<<<>>><<<<>><<><<>><<<>>><<<<>>>><>><>>><<<><<<<>>>><<<>>><<>><<>><<<<>>><<<>><<>>>><<>><><>>><<>>><<>><<><<<<>>>><>>><<><<>>>><<<>>><<>>><<>>><<<>>><<>>><<><<>>>><<<<>>>><<<>><<<>>><<>><<<>>>><<<<>>>><<<<><>>>><<<<>><>><<>>><>>><>>><<<<>>><<>><>><<>>><>><<>><><<<>>><<<><<<<>>><<<<>>>><<<<>>><<><<>>><<<<>><<<>><<<<>>><<<>><>>><<>>>><<<>>><<><<>><<>><<<>>>><><<<<>><<<>><<<><<<>>>><>>><<<>>>><<<><<>>><<<>>>><>>>><<<<>><<>>>><>>><<<<>>>><<<<>>><>><<<>><<>><<<><<<<>>><>>><<<>>>><><>>><<<<>>><>>>><<<>><<<<>><>>>><><<<>>>><><<<<>>><<>>>><>>><<<>>><<<><<<<>>><<<<><<<<>>>><<<<>><<>>>><<<<>>><>>>><<<>><<<><<<<><<<<>>>><<<>>><<<><>>>><<<>><<<>>><<<<>>>><<<>>>><<<>><<<>>><<>>>><<<<>>><<<><>>><>>>><>><<<>><<>><><<<<><<<>>><<<>><<<<>>>><<<>>>><<>>><<<<>>>><<<>>>><<<>>><<<>>>><>><>>>><<<>>>><<<<>>><<<<>><<<>><<<>>>><<>>><><<>><<<<>><<>>><<<<>>>><<<<>><<<<>>><>><<<>>><<>><<<<>><<<>>><<<><<>>>><<>>><><<<<><>>><<>>><<<<><<<<><>>><<>>>><<<>>>><<>>><<<<><<>>><<>>>><<<<>><<<>>><<<>><<<<>>><<<>><<<<>>><<>>>><>><<<<>>><<<>>>><<<<>><<<>>><<<<>><<><<><>>>><<<><>>>><<<>>><>>><>>>><<<>><<<<>><>><<<>>><<<<><>>>><<<<><<<<>>><<><<<>>>><<<><<><<<<>>>><<><<><<>><<<<>>>><<>>><>>><<<<>>>><<<<><<>><<<>>><<<<>>>><<<>>><>>>><<<<>>><<<>><<<>><<<>>>><<<>><<<<>>><><><<>>>><>>><<>>><<<>><<>>>><>>>><<<><>>>><>>>><<<>>>><<<>><<<<>>>><<<<><<<<>>><<>><<<>>><<<<>>>><>>>><<><<<<><<><>><<<>>><<<><<<<><<<<>>><<<<>>>><<<<>><<<<>>>><<>>><<<>>><<<>>>><<<>><<<>>>><<<<>>>><>>>><<><<>><<<<>><<>><<<<>>><>>>><<<<>><<>>><<>>>><<<><>><><<<<>>><<<><<>>>><<>>><<<<>>><<<>>><>>>><<>>><<<>>><<>><>><>>>><<><<<><<<<>>>><<<<><>>><>><<>>><<<><>>><<<<><>><<<<><<<<><<<<><>>>><<<>>><<<<>><<<<>>><<>>>><<>>>><>>>><<<>><<<<>><>>><<<><<>><><<>>><<<<>>><><<<<>>><>>><<>>><<>>>><><<<>>>><<>>><>>>><>>>><<<<>>><<>>>><<>>>><>><><<<<>>><<><<>>><<<<>>><<<<><<<<><<>>>><>>>><<<<>>>><<<<><<<<>>><<>>><<<><>>><<><<<>>>><<><>>>><><<>><<>>>><<>><<<><<<>>>><>>>><<<><>>><<>>><<<>>><<<<>>>><<<>><<<<><<<>>><<<<>><>>><<>>><<<<>><>><<<>>><><>><<<>>>><<>>>><<<><<<<>><<<<>>>><>><<><<>>>><<<>><>><<<<><>>><><<<<>>><><<<>>><<><<<>>>><><<>>><<><<>>><<<><<<<><<>><<<>>>><<<<>>>><<>>><<<><<<>>><>><<<<>><<>>><<<>><>>><<<><>><<>><<<>><<>><<>>><<<<>>>><>><<><<<<><>>><<<>>><<<<>><>><<>>>><<><<>><<>>><>>><<<>>><<><<<<><><<>>><<>>><<<><><<>>>><<<>><<<<>><<<>>><<<><>>><<>>><<>>>><><<>>><<>><>>>><<>><<<><>><<<>>><<<<>>><<>><<<>>>><<<>>><<>>><<<<>>>><<<>>>><<<>>>><>>>><<>>>><<<>>><<>>>><<>><<>>>><<<><><><<>>><<<>><<<><>>>><>>><<>><<<<>>><<<<>><<<>><>><<<<>><<<<><<<><<<<>><<<>>>><>>>><<>><<><<<>>><<<><<<>>><<>>>><<<>>>><>>>><<<><>>><<>>><<<<>>><<<<>>>><>>"

private val USABLE_MOVE_PART = MOVE_SOLUTION

private fun moveSeq() = sequence {
    while (true) {
        yieldAll(USABLE_MOVE_PART.toList())
    }
}
private fun figureSeq() = sequence {
    while (true) {
        yieldAll(listOf(
            Figure(listOf(0 to 0, 0 to 1, 0 to 2, 0 to 3)),
            Figure(listOf(0 to 1, 1 to 0, 1 to 1, 1 to 2, 2 to 1)),
            Figure(listOf(0 to 0, 0 to 1, 0 to 2, 1 to 2, 2 to 2)),
            Figure(listOf(0 to 0, 1 to 0, 2 to 0, 3 to 0)),
            Figure(listOf(0 to 0, 0 to 1, 1 to 0, 1 to 1)),
        ))
    }
}

private data class FigureWithPosition(val figure: Figure, var position: Pair<Long, Int>)

private class Tetris {
    val movementIt = moveSeq().iterator()
    val figureIt = figureSeq().iterator()

    var figure: FigureWithPosition? = null
    val lines = TreeMap<Long, MutableList<Boolean>>()
    var counter = 0L
    var baseline = 0L
    var ground = 0L

    val repeatCounter = mutableMapOf<Pair<String, Figure>, AtomicInteger>()
    var repeatableIndexes = mutableListOf<Long>()
}

private fun FigureWithPosition.normalize(): List<Pair<Long, Int>> {
    return figure.parts.map { p -> p.first + position.first to p.second + position.second }
}

context (Tetris)
private fun cleanup() {
    lines.entries.filter { !it.value.contains(false) }.maxOfOrNull { it.key }?.let { newGround ->
        ground = newGround
        lines.headMap(newGround).clear()
    }
}

context(Tetris)
private fun Figure.locateFigure(): FigureWithPosition {
    counter += 1
    return FigureWithPosition(
        figure = this,
        position = baseline + 3 to 2
    )
}

private enum class MoveDir { LEFT, RIGHT, DOWN }

context(Tetris)
private fun FigureWithPosition.tryMove(moveDir: MoveDir): Boolean {
    val possibleMove = when (moveDir) {
        MoveDir.LEFT -> position.copy(second = position.second - 1)
        MoveDir.RIGHT -> position.copy(second = position.second + 1)
        MoveDir.DOWN -> position.copy(first = position.first - 1)
    }
    if (possibleMove.first < 0) {
        return false // borders
    }
    val possiblePosition = copy(position = possibleMove).normalize()
    if (possiblePosition.maxOf { it.second } > 6 || possiblePosition.minOf { it.second } < 0) {
        return false // borders
    }
    val collision = possiblePosition.any { p -> lines[p.first]?.get(p.second) == true }
    if (!collision) {
        position = possibleMove
    }
    return !collision
}

private fun Tetris.run(loggableKey: String? = null, loggableFigure: Figure? = null) {
    val nextMove = movementIt.next()
    if (figure == null) {
        figure = figureIt.next().locateFigure()
        // Detecting cycles for part2 vvvv
        val direction = (1..USABLE_MOVE_PART.length).map { movementIt.next() }.joinToString("")
        repeatCounter.getOrPut(direction to figure!!.figure) { AtomicInteger(0) }.addAndGet(1)
        if (loggableKey != null && loggableFigure != null && direction == loggableKey && figure?.figure == loggableFigure) {
            repeatableIndexes.add(counter)
        }
        // !Detecting cycles for part2 ^^^^
    }
    val currentFigure = figure ?: error("failure")
    //draw("Before gas movement")
    when (nextMove) {
        '>' -> currentFigure.tryMove(MoveDir.RIGHT)
        '<' -> currentFigure.tryMove(MoveDir.LEFT)
        else -> error("not expected")
    }
    //draw("After gas movement")

    if (!currentFigure.tryMove(MoveDir.DOWN)) {
        //draw("Before cleanup")
        currentFigure.normalize().forEach { (y, x) ->
            lines.getOrPut(y) { (0L..6).map { false }.toMutableList() } [x] = true
        }
        cleanup()
        figure = null
        //draw("After cleanup")
        baseline = lines.maxOf { it.key } + 1
    }
}

@Suppress("unused")
private fun Tetris.draw(prefix: String) {
    val lines = (maxOf(baseline+3+(figure?.figure?.parts?.maxOf { it.first } ?: 0), 6)downTo 0).map { row ->
        (0..6).joinToString(" ") { col ->
            val active = figure?.normalize() ?: emptyList()
            when {
                lines[row]?.get(col) == true -> "#"
                row to col in active -> "@"
                else -> "."
            }
        }
    }
    println(prefix)
    lines.forEach { line -> println(line) }
}

fun main() {
    val ms1 = measureTimeMillis {
        val tetris = Tetris()
        while (tetris.counter <= 2022) {
            tetris.run()
        }
        "How many units tall will the tower of rocks be after 2022 rocks have stopped falling? => ${tetris.baseline}".cowsay("day 17")
    }
    println("Part 1 took ${ms1}ms")

    val ms2 = measureTimeMillis {
        val tetris2 = Tetris()
        // 10_000 enough to detect cycle
        while (tetris2.counter <= 10_000) {
            tetris2.run()
        }
        val distribution = tetris2.repeatCounter.values.map { it.get() }.groupBy { it }.mapValues { it.value.size } // {1=226, 6=1050, 5=695}
        // => 2 possible different cycles
//        val (repeatableKey, repeatableFigure) = tetris2.repeatCounter.entries.first { it.value.get() == 6 }.key // => 1588571428566 (x)
        val (repeatableKey, repeatableFigure) = tetris2.repeatCounter.entries.first { it.value.get() == 5 }.key // => 1591977077352 (v)!!!

        val tetris3 = Tetris()
        while (tetris3.counter <= 10_000) {
            tetris3.run(loggableKey = repeatableKey, loggableFigure = repeatableFigure)
        }
        val firstRepeatableIndex = tetris3.repeatableIndexes[0]
        val repeatableDiff = tetris3.repeatableIndexes[1] - tetris3.repeatableIndexes[0]
        println("First repeatable index $firstRepeatableIndex, repeatableDiff=$repeatableDiff [${tetris3.repeatableIndexes.drop(2).take(4)}]")

        val tetris4 = Tetris()
        while (tetris4.counter <= firstRepeatableIndex) {
            tetris4.run()
        }
        val tetris41 = Tetris()
        while (tetris41.counter <= tetris3.repeatableIndexes[1]) {
            tetris41.run()
        }
        val diff = tetris41.baseline - tetris4.baseline
        println("Baseline difference for one repeatable cycle = $diff")

        val multiplier = (1_000_000_000_000 - firstRepeatableIndex) / repeatableDiff
        val rest = (1_000_000_000_000 - firstRepeatableIndex) % repeatableDiff
        println("Number of cycles = $multiplier, leftovers after repeatable cycles = $rest")

        val tetris5 = Tetris()
        while (tetris5.counter <= firstRepeatableIndex + rest) {
            tetris5.run()
        }
        val result = (multiplier * diff) + tetris5.baseline
        "How tall will the tower be after 1000000000000 rocks have stopped? = $result".cowsay("day 17")
    }
    println("Part 2 took ${ms2}ms")
}

// 1591977077352